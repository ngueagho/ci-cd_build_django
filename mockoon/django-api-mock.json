{
  "uuid": "django-api",
  "lastMigration": 27,
  "name": "Django Development API",
  "endpointPrefix": "api/v1",
  "latency": 150,
  "port": 3000,
  "hostname": "0.0.0.0",
  "folders": [],
  "routes": [
    {
      "uuid": "health-check",
      "type": "http",
      "documentation": "Health check endpoint",
      "method": "get",
      "endpoint": "health",
      "responses": [
        {
          "uuid": "health-response",
          "body": "{\"status\":\"ok\",\"timestamp\":\"{{faker 'date.recent'}}\",\"version\":\"1.0.0\",\"database\":\"connected\",\"celery\":\"running\"}",
          "latency": 0,
          "statusCode": 200,
          "label": "Health OK",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ]
        }
      ]
    },
    {
      "uuid": "auth-login",
      "type": "http",
      "documentation": "User authentication",
      "method": "post",
      "endpoint": "auth/login",
      "responses": [
        {
          "uuid": "login-success",
          "body": "{\n  \"access_token\": \"{{faker 'string.alphanumeric' length=64}}\",\n  \"refresh_token\": \"{{faker 'string.alphanumeric' length=64}}\",\n  \"token_type\": \"Bearer\",\n  \"expires_in\": 3600,\n  \"user\": {\n    \"id\": {{faker 'number.int' min=1 max=100}},\n    \"username\": \"{{body 'username'}}\",\n    \"email\": \"{{body 'username'}}@example.com\",\n    \"first_name\": \"{{faker 'person.firstName'}}\",\n    \"last_name\": \"{{faker 'person.lastName'}}\",\n    \"is_staff\": false,\n    \"is_active\": true,\n    \"date_joined\": \"{{faker 'date.past'}}\",\n    \"profile\": {\n      \"avatar\": \"{{faker 'image.avatar'}}\",\n      \"bio\": \"{{faker 'lorem.paragraph'}}\",\n      \"phone\": \"{{faker 'phone.number'}}\"\n    }\n  }\n}",
          "latency": 400,
          "statusCode": 200,
          "label": "Login successful",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        {
          "uuid": "login-failed",
          "body": "{\n  \"error\": \"Invalid credentials\",\n  \"code\": \"AUTHENTICATION_FAILED\",\n  \"detail\": \"Username or password is incorrect\"\n}",
          "latency": 500,
          "statusCode": 401,
          "label": "Login failed",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "rules": [
            {
              "target": "body",
              "modifier": "username",
              "value": "wronguser",
              "invert": false,
              "operator": "equals"
            }
          ]
        }
      ]
    },
    {
      "uuid": "users-list",
      "type": "http",
      "documentation": "List users with pagination",
      "method": "get",
      "endpoint": "users",
      "responses": [
        {
          "uuid": "users-response",
          "body": "{\n  \"count\": 150,\n  \"next\": \"http://localhost:8000/api/v1/users/?page=2\",\n  \"previous\": null,\n  \"results\": [\n    {{#repeat 10}}\n    {\n      \"id\": {{faker 'number.int' min=1 max=1000}},\n      \"username\": \"{{faker 'internet.userName'}}\",\n      \"email\": \"{{faker 'internet.email'}}\",\n      \"first_name\": \"{{faker 'person.firstName'}}\",\n      \"last_name\": \"{{faker 'person.lastName'}}\",\n      \"is_active\": {{faker 'datatype.boolean'}},\n      \"date_joined\": \"{{faker 'date.past'}}\",\n      \"profile\": {\n        \"avatar\": \"{{faker 'image.avatar'}}\",\n        \"bio\": \"{{faker 'lorem.sentence'}}\",\n        \"location\": \"{{faker 'location.city'}}\"\n      }\n    }{{#unless @last}},{{/unless}}\n    {{/repeat}}\n  ]\n}",
          "latency": 200,
          "statusCode": 200,
          "label": "Users list",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Authorization",
              "value": "Bearer required"
            }
          ]
        },
        {
          "uuid": "unauthorized",
          "body": "{\n  \"detail\": \"Authentication credentials were not provided.\"\n}",
          "latency": 100,
          "statusCode": 401,
          "label": "Unauthorized",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "rules": [
            {
              "target": "header",
              "modifier": "authorization",
              "value": "",
              "invert": false,
              "operator": "equals"
            }
          ]
        }
      ]
    },
    {
      "uuid": "articles-list",
      "type": "http",
      "documentation": "Blog articles with filters",
      "method": "get",
      "endpoint": "articles",
      "responses": [
        {
          "uuid": "articles-response",
          "body": "{\n  \"count\": 75,\n  \"next\": \"http://localhost:8000/api/v1/articles/?page=2\",\n  \"previous\": null,\n  \"results\": [\n    {{#repeat 5}}\n    {\n      \"id\": {{faker 'number.int' min=1 max=500}},\n      \"title\": \"{{faker 'lorem.sentence'}}\",\n      \"slug\": \"{{faker 'lorem.slug'}}\",\n      \"excerpt\": \"{{faker 'lorem.paragraph'}}\",\n      \"content\": \"{{faker 'lorem.paragraphs'}}\",\n      \"status\": \"{{faker 'helpers.arrayElement' ['draft', 'published', 'archived']}}\",\n      \"featured_image\": \"{{faker 'image.url'}}\",\n      \"author\": {\n        \"id\": {{faker 'number.int' min=1 max=10}},\n        \"username\": \"{{faker 'internet.userName'}}\",\n        \"first_name\": \"{{faker 'person.firstName'}}\",\n        \"last_name\": \"{{faker 'person.lastName'}}\"\n      },\n      \"categories\": [{{#repeat (faker 'number.int' min=1 max=3)}}{\n        \"id\": {{faker 'number.int' min=1 max=20}},\n        \"name\": \"{{faker 'lorem.word'}}\",\n        \"slug\": \"{{faker 'lorem.slug'}}\"\n      }{{#unless @last}},{{/unless}}{{/repeat}}],\n      \"tags\": [{{#repeat (faker 'number.int' min=1 max=5)}}\"{{faker 'lorem.word'}}\"{{#unless @last}},{{/unless}}{{/repeat}}],\n      \"created_at\": \"{{faker 'date.past'}}\",\n      \"updated_at\": \"{{faker 'date.recent'}}\",\n      \"published_at\": \"{{faker 'date.past'}}\",\n      \"views_count\": {{faker 'number.int' min=10 max=1000}},\n      \"likes_count\": {{faker 'number.int' min=0 max=100}}\n    }{{#unless @last}},{{/unless}}\n    {{/repeat}}\n  ]\n}",
          "latency": 300,
          "statusCode": 200,
          "label": "Articles list",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ]
        }
      ]
    },
    {
      "uuid": "article-detail",
      "type": "http",
      "documentation": "Single article by ID",
      "method": "get",
      "endpoint": "articles/:id",
      "responses": [
        {
          "uuid": "article-detail-response",
          "body": "{\n  \"id\": {{urlParam 'id'}},\n  \"title\": \"{{faker 'lorem.sentence'}}\",\n  \"slug\": \"{{faker 'lorem.slug'}}\",\n  \"content\": \"{{faker 'lorem.paragraphs' count=10}}\",\n  \"excerpt\": \"{{faker 'lorem.paragraph'}}\",\n  \"status\": \"published\",\n  \"featured_image\": \"{{faker 'image.url'}}\",\n  \"meta_title\": \"{{faker 'lorem.sentence'}}\",\n  \"meta_description\": \"{{faker 'lorem.paragraph'}}\",\n  \"author\": {\n    \"id\": {{faker 'number.int' min=1 max=10}},\n    \"username\": \"{{faker 'internet.userName'}}\",\n    \"first_name\": \"{{faker 'person.firstName'}}\",\n    \"last_name\": \"{{faker 'person.lastName'}}\",\n    \"bio\": \"{{faker 'lorem.paragraph'}}\",\n    \"avatar\": \"{{faker 'image.avatar'}}\"\n  },\n  \"categories\": [{{#repeat (faker 'number.int' min=1 max=3)}}{\n    \"id\": {{faker 'number.int' min=1 max=20}},\n    \"name\": \"{{faker 'lorem.word'}}\",\n    \"slug\": \"{{faker 'lorem.slug'}}\",\n    \"description\": \"{{faker 'lorem.sentence'}}\"\n  }{{#unless @last}},{{/unless}}{{/repeat}}],\n  \"tags\": [{{#repeat (faker 'number.int' min=2 max=6)}}{\n    \"id\": {{faker 'number.int' min=1 max=50}},\n    \"name\": \"{{faker 'lorem.word'}}\",\n    \"slug\": \"{{faker 'lorem.slug'}}\"\n  }{{#unless @last}},{{/unless}}{{/repeat}}],\n  \"comments\": [\n    {{#repeat 3}}\n    {\n      \"id\": {{faker 'number.int' min=1 max=1000}},\n      \"content\": \"{{faker 'lorem.paragraph'}}\",\n      \"author\": {\n        \"username\": \"{{faker 'internet.userName'}}\",\n        \"avatar\": \"{{faker 'image.avatar'}}\"\n      },\n      \"created_at\": \"{{faker 'date.past'}}\",\n      \"is_approved\": {{faker 'datatype.boolean'}}\n    }{{#unless @last}},{{/unless}}\n    {{/repeat}}\n  ],\n  \"created_at\": \"{{faker 'date.past'}}\",\n  \"updated_at\": \"{{faker 'date.recent'}}\",\n  \"published_at\": \"{{faker 'date.past'}}\",\n  \"views_count\": {{faker 'number.int' min=100 max=5000}},\n  \"likes_count\": {{faker 'number.int' min=10 max=500}},\n  \"reading_time\": {{faker 'number.int' min=3 max=15}}\n}",
          "latency": 250,
          "statusCode": 200,
          "label": "Article found",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        {
          "uuid": "article-not-found",
          "body": "{\n  \"detail\": \"Not found.\"\n}",
          "latency": 100,
          "statusCode": 404,
          "label": "Article not found",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "rules": [
            {
              "target": "params",
              "modifier": "id",
              "value": "999",
              "invert": false,
              "operator": "equals"
            }
          ]
        }
      ]
    },
    {
      "uuid": "create-article",
      "type": "http",
      "documentation": "Create new article",
      "method": "post",
      "endpoint": "articles",
      "responses": [
        {
          "uuid": "article-created",
          "body": "{\n  \"id\": {{faker 'number.int' min=100 max=999}},\n  \"title\": \"{{body 'title'}}\",\n  \"slug\": \"{{faker 'lorem.slug'}}\",\n  \"content\": \"{{body 'content'}}\",\n  \"status\": \"draft\",\n  \"author\": {\n    \"id\": 1,\n    \"username\": \"current_user\"\n  },\n  \"created_at\": \"{{now}}\",\n  \"updated_at\": \"{{now}}\"\n}",
          "latency": 400,
          "statusCode": 201,
          "label": "Article created",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        {
          "uuid": "validation-error",
          "body": "{\n  \"title\": [\"This field is required.\"],\n  \"content\": [\"This field is required.\"]\n}",
          "latency": 200,
          "statusCode": 400,
          "label": "Validation error",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "rules": [
            {
              "target": "body",
              "modifier": "title",
              "value": "",
              "invert": false,
              "operator": "equals"
            }
          ]
        }
      ]
    },
    {
      "uuid": "upload-file",
      "type": "http",
      "documentation": "File upload endpoint",
      "method": "post",
      "endpoint": "upload",
      "responses": [
        {
          "uuid": "upload-success",
          "body": "{\n  \"id\": {{faker 'number.int' min=1 max=1000}},\n  \"filename\": \"{{faker 'system.fileName'}}\",\n  \"original_name\": \"document.pdf\",\n  \"size\": {{faker 'number.int' min=1024 max=10485760}},\n  \"content_type\": \"application/pdf\",\n  \"url\": \"http://localhost:9000/django-media/{{faker 'system.fileName'}}\",\n  \"created_at\": \"{{now}}\"\n}",
          "latency": 800,
          "statusCode": 201,
          "label": "File uploaded",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ]
        }
      ]
    },
    {
      "uuid": "categories-list",
      "type": "http",
      "documentation": "Article categories",
      "method": "get",
      "endpoint": "categories",
      "responses": [
        {
          "uuid": "categories-response",
          "body": "[\n  {{#repeat 8}}\n  {\n    \"id\": {{@index}},\n    \"name\": \"{{faker 'lorem.word'}}\",\n    \"slug\": \"{{faker 'lorem.slug'}}\",\n    \"description\": \"{{faker 'lorem.sentence'}}\",\n    \"articles_count\": {{faker 'number.int' min=5 max=50}}\n  }{{#unless @last}},{{/unless}}\n  {{/repeat}}\n]",
          "latency": 150,
          "statusCode": 200,
          "label": "Categories list",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ]
        }
      ]
    },
    {
      "uuid": "celery-task",
      "type": "http",
      "documentation": "Async task creation",
      "method": "post",
      "endpoint": "tasks/send-email",
      "responses": [
        {
          "uuid": "task-created",
          "body": "{\n  \"task_id\": \"{{faker 'string.uuid'}}\",\n  \"status\": \"pending\",\n  \"message\": \"Email task queued successfully\"\n}",
          "latency": 200,
          "statusCode": 202,
          "label": "Task queued",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ]
        }
      ]
    }
  ],
  "proxyMode": false,
  "proxyHost": "",
  "proxyRemovePrefix": false,
  "tlsOptions": {},
  "cors": true,
  "headers": [
    {
      "key": "Access-Control-Allow-Origin",
      "value": "*"
    },
    {
      "key": "Access-Control-Allow-Methods",
      "value": "GET,POST,PUT,PATCH,DELETE,OPTIONS"
    },
    {
      "key": "Access-Control-Allow-Headers",
      "value": "Content-Type,Authorization"
    }
  ],
  "proxyReqHeaders": [],
  "proxyResHeaders": [],
  "data": []
}