name: Django - Deploy to Development ...

on:
  push:
    branches: [develop]
    paths:
      - 'backend/**'  # Adjust path to your Django app
  workflow_dispatch:

env:
  REGISTRY: registry.propentatech.com  # CHANGEME: Your Harbor registry
  IMAGE_NAME: propentatech/django-app  # CHANGEME: Your image name

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        working-directory: ./backend
        run: |
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Run linting
        working-directory: ./backend
        run: |
          flake8 .
          black --check .
          isort --check-only .

      - name: Run tests
        working-directory: ./backend
        run: |
          python manage.py test --settings=myproject.settings.test
          coverage run --source='.' manage.py test
          coverage xml
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379/0

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/coverage.xml

  build-and-deploy:
    runs-on: ubuntu-latest
    needs: test
    environment: development

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Harbor Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.HARBOR_USERNAME }}
          password: ${{ secrets.HARBOR_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:dev-${{ github.sha }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:dev-latest
          build-args: |
            DJANGO_SETTINGS_MODULE=myproject.settings.development

      - name: Run migrations
        run: |
          # This would typically be handled by the entrypoint script
          echo "Migrations will be run by the container entrypoint"

      - name: Trigger ArgoCD deployment
        run: |
          curl -X POST \
            -H "Content-Type: application/json" \
            -H "X-Hub-Signature-256: sha256=$(echo -n '${{ github.sha }}' | openssl dgst -sha256 -hmac '${{ secrets.GITHUB_WEBHOOK_SECRET }}' -binary | xxd -p)" \
            -d '{
              "action": "deployment",
              "repository": {"name": "${{ github.event.repository.name }}"},
              "ref": "${{ github.ref }}",
              "after": "${{ github.sha }}",
              "environment": "development",
              "image_tag": "dev-${{ github.sha }}",
              "app_name": "django-app-dev"
            }' \
            https://argocd-webhook.propentatech.com/webhook/github

      - name: Notify Slack
        if: always()
        run: |
          STATUS=${{ job.status == 'success' && '✅' || '❌' }}
          curl -X POST \
            -H 'Content-type: application/json' \
            --data "{\"text\": \"$STATUS Django Development Deployment - ${{ job.status }}\"}" \
            ${{ secrets.SLACK_WEBHOOK_URL }}
