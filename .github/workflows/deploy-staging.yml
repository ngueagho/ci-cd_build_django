name: Django - Deploy to Staging

on:
  push:
    branches: [develop]
    paths:
      - 'backend/**'  # Adjust path to your Django app
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to deploy'
        required: true
        default: 'latest'

env:
  REGISTRY: registry.propentatech.com
  IMAGE_NAME: propentatech/django-app
  ENVIRONMENT: staging

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tag: ${{ steps.meta.outputs.tags }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: 'backend/requirements.txt'

      - name: Install dependencies
        working-directory: ./backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Run linting
        working-directory: ./backend
        run: |
          flake8 . --max-line-length=88 --extend-ignore=E203,W503
          black --check .
          isort --check-only .

      - name: Run type checking
        working-directory: ./backend
        run: mypy .

      - name: Run security checks
        working-directory: ./backend
        run: |
          bandit -r . -f json -o bandit-report.json
          safety check --json --output safety-report.json

      - name: Run tests with coverage
        working-directory: ./backend
        run: |
          python -m pytest --cov=. --cov-report=xml --cov-report=html
          coverage report --fail-under=80

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/coverage.xml
          flags: django,staging

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Harbor Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.HARBOR_USERNAME }}
          password: ${{ secrets.HARBOR_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch,prefix=staging-
            type=sha,prefix=staging-
            type=raw,value=staging-latest

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            DJANGO_ENV=staging
            DEBUG=False

  security-scan:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Login to Harbor Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.HARBOR_USERNAME }}
          password: ${{ secrets.HARBOR_PASSWORD }}

      - name: Run vulnerability scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ needs.build.outputs.image-tag }}
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'

  deploy-staging:
    runs-on: ubuntu-latest
    needs: [build, security-scan]
    environment: staging

    steps:
      - name: Trigger ArgoCD deployment
        run: |
          curl -X POST \
            -H "Content-Type: application/json" \
            -H "X-Hub-Signature-256: sha256=$(echo -n '${{ github.sha }}' | openssl dgst -sha256 -hmac '${{ secrets.GITHUB_WEBHOOK_SECRET }}' -binary | xxd -p)" \
            -d '{
              "action": "deployment",
              "repository": {
                "name": "${{ github.event.repository.name }}",
                "full_name": "${{ github.repository }}"
              },
              "ref": "${{ github.ref }}",
              "after": "${{ github.sha }}",
              "environment": "staging",
              "image_tag": "staging-${{ github.sha }}",
              "app_name": "django-app-staging"
            }' \
            https://argocd-webhook.propentatech.com/webhook/github

      - name: Wait for deployment
        run: |
          echo "Waiting for staging deployment to stabilize..."
          sleep 60

      - name: Run staging smoke tests
        run: |
          curl -f https://django-staging.propentatech.com/health/ || exit 1
          curl -f https://django-staging.propentatech.com/api/v1/status/ || exit 1

      - name: Notify team
        if: success()
        run: |
          curl -X POST \
            -H 'Content-type: application/json' \
            --data '{
              "text": "âœ… Django Staging Deployment Successful!",
              "attachments": [{
                "color": "good",
                "fields": [{
                  "title": "Repository",
                  "value": "${{ github.repository }}",
                  "short": true
                }, {
                  "title": "Version",
                  "value": "${{ github.sha }}",
                  "short": true
                }, {
                  "title": "Environment",
                  "value": "Staging",
                  "short": true
                }, {
                  "title": "URL",
                  "value": "https://django-staging.propentatech.com",
                  "short": true
                }]
              }]
            }' \
            ${{ secrets.SLACK_WEBHOOK_URL }}