name: Django - Deploy to Production

on:
  push:
    branches: [main]
    paths:
      - 'backend/**'
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to deploy'
        required: true
        default: 'latest'

env:
  REGISTRY: registry.propentatech.com
  IMAGE_NAME: propentatech/django-app
  ENVIRONMENT: production

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tag: ${{ steps.meta.outputs.tags }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: 'backend/requirements.txt'

      - name: Install dependencies
        working-directory: ./backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Run comprehensive linting
        working-directory: ./backend
        run: |
          flake8 . --max-line-length=88 --extend-ignore=E203,W503 --statistics
          black --check .
          isort --check-only .
          pylint **/*.py --fail-under=8.5

      - name: Run type checking
        working-directory: ./backend
        run: mypy . --strict

      - name: Run security checks
        working-directory: ./backend
        run: |
          bandit -r . -f json -o bandit-report.json --severity-level medium
          safety check --json --output safety-report.json --ignore 70612

      - name: Run comprehensive tests
        working-directory: ./backend
        run: |
          python -m pytest --cov=. --cov-report=xml --cov-report=html --junitxml=pytest.xml
          coverage report --fail-under=85

      - name: Run integration tests
        working-directory: ./backend
        run: |
          python manage.py test --settings=myproject.settings.test --keepdb
          python manage.py migrate --settings=myproject.settings.test --run-syncdb

      - name: Performance tests
        working-directory: ./backend
        run: |
          python manage.py collectstatic --noinput --settings=myproject.settings.production
          # Add performance tests here

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Harbor Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.HARBOR_USERNAME }}
          password: ${{ secrets.HARBOR_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch,prefix=prod-
            type=sha,prefix=prod-
            type=raw,value=prod-latest
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            DJANGO_ENV=production
            DEBUG=False
            DJANGO_SECRET_KEY=${{ secrets.DJANGO_SECRET_KEY }}

      - name: Generate SBOM
        uses: anchore/sbom-action@v0
        with:
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.build.outputs.digest }}
          format: spdx-json
          output-file: sbom.spdx.json

  security-scan:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Login to Harbor Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.HARBOR_USERNAME }}
          password: ${{ secrets.HARBOR_PASSWORD }}

      - name: Run comprehensive vulnerability scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ needs.build.outputs.image-tag }}
          format: 'table'
          exit-code: '1'
          ignore-unfixed: false
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH,MEDIUM'

      - name: Upload scan results
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ needs.build.outputs.image-tag }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload to GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  deploy-prod:
    runs-on: ubuntu-latest
    needs: [build, security-scan]
    environment: production
    if: github.ref == 'refs/heads/main' || github.event_name == 'release'

    steps:
      - name: Wait for manual approval
        uses: trstringer/manual-approval@v1
        with:
          secret: ${{ github.TOKEN }}
          approvers: ${{ secrets.PROD_APPROVERS }}
          minimum-approvals: 2
          issue-title: "Deploy Django API to Production"
          issue-body: |
            **ðŸš¨ PRODUCTION DEPLOYMENT REQUEST ðŸš¨**

            - **Repository**: ${{ github.repository }}
            - **Branch**: ${{ github.ref_name }}
            - **Commit**: ${{ github.sha }}
            - **Image**: ${{ needs.build.outputs.image-tag }}
            - **Security Scan**: âœ… Passed

            **Checklist before approval:**
            - [ ] Code review completed
            - [ ] All tests passing (>85% coverage)
            - [ ] Security scan passed
            - [ ] Database migrations tested
            - [ ] Performance tests passed
            - [ ] Ready for production traffic

            Please review and approve this deployment to production.

      - name: Create database backup
        run: |
          echo "Creating database backup before deployment..."
          # Add your database backup commands here
          echo "Database backup completed"

      - name: Run database migrations (dry-run)
        run: |
          echo "Testing database migrations..."
          # Add migration dry-run commands here
          echo "Migrations validated"

      - name: Trigger ArgoCD deployment with canary
        run: |
          curl -X POST \
            -H "Content-Type: application/json" \
            -H "X-Hub-Signature-256: sha256=$(echo -n '${{ github.sha }}' | openssl dgst -sha256 -hmac '${{ secrets.GITHUB_WEBHOOK_SECRET }}' -binary | xxd -p)" \
            -d '{
              "action": "deployment",
              "repository": {
                "name": "${{ github.event.repository.name }}",
                "full_name": "${{ github.repository }}"
              },
              "ref": "${{ github.ref }}",
              "after": "${{ github.sha }}",
              "environment": "production",
              "image_tag": "prod-${{ github.sha }}",
              "app_name": "django-app-prod",
              "deployment_strategy": "canary"
            }' \
            https://argocd-webhook.propentatech.com/webhook/github

      - name: Wait for canary deployment
        run: |
          echo "Waiting for canary deployment to stabilize..."
          sleep 120

      - name: Run production smoke tests
        run: |
          curl -f https://api.propentatech.com/health/ || exit 1
          curl -f https://api.propentatech.com/api/v1/status/ || exit 1
          # Add more comprehensive API tests

      - name: Run database migrations
        run: |
          echo "Running production database migrations..."
          # Add actual migration commands here
          echo "Migrations completed successfully"

      - name: Promote to full production
        run: |
          curl -X POST \
            -H "Content-Type: application/json" \
            -H "X-Hub-Signature-256: sha256=$(echo -n 'promote-canary' | openssl dgst -sha256 -hmac '${{ secrets.GITHUB_WEBHOOK_SECRET }}' -binary | xxd -p)" \
            -d '{
              "action": "promote_canary",
              "app_name": "django-app-prod"
            }' \
            https://argocd-webhook.propentatech.com/webhook/github

      - name: Final production verification
        run: |
          echo "Running final production verification..."
          sleep 60
          curl -f https://api.propentatech.com/health/ || exit 1

      - name: Notify team on success
        if: success()
        run: |
          curl -X POST \
            -H 'Content-type: application/json' \
            --data '{
              "text": "ðŸŽ‰ Django Production Deployment Successful!",
              "attachments": [{
                "color": "good",
                "fields": [{
                  "title": "Repository",
                  "value": "${{ github.repository }}",
                  "short": true
                }, {
                  "title": "Version",
                  "value": "${{ github.sha }}",
                  "short": true
                }, {
                  "title": "Environment",
                  "value": "Production",
                  "short": true
                }, {
                  "title": "URL",
                  "value": "https://api.propentatech.com",
                  "short": true
                }]
              }]
            }' \
            ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Rollback on failure
        if: failure()
        run: |
          echo "Deployment failed, initiating rollback..."
          curl -X POST \
            -H "Content-Type: application/json" \
            -H "X-Hub-Signature-256: sha256=$(echo -n 'rollback' | openssl dgst -sha256 -hmac '${{ secrets.GITHUB_WEBHOOK_SECRET }}' -binary | xxd -p)" \
            -d '{
              "action": "rollback",
              "app_name": "django-app-prod"
            }' \
            https://argocd-webhook.propentatech.com/webhook/github